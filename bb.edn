;; initial outline from https://github.com/babashka/http-server/blob/main/bb.edn
{:pods {}
 :deps { local/deps                      {:local/root "."}}

;        io.github.borkdude/gh-release-artifact     {:git/sha "cf082df46a648178d1904e9cbcb787d8136a35c6"}

 :paths ["src/bb" "src/main/clj"]
 :tasks {:requires [[babashka.cli :as cli]]

         clean {:requires [[babashka.fs :as fs]]
                :task (do
                        (fs/delete-tree "cljs-test-runner-out")
                        (fs/delete-tree ".cpcache"))}


         quickdoc {:extra-deps  {io.github.borkdude/quickdoc {:git/sha "62dd3c6a828c3a5e61bae6ca80c8ba4781356a67"}}
                   :doc "Invoke quickdoc"
                   :requires ([quickdoc.api :as api])
                   :task ;(let [{:keys [markdown]}
                             (api/quickdoc {:toc true
                                            :git/branch  "main"
                                            :github/repo "https://github.com/davesann/let-map"
                                            :source-paths ["src/main/clj" "src/test/clj"]})}

         ppcp {:doc "Pretty print the classpath - add (run 'ppcp) in a task to see it's classpath"
               :requires [[babashka.classpath :refer [get-classpath]]
                          [clojure.string :as s]
                          [clojure.pprint :refer [pprint]]]

               :task (-> (get-classpath)
                         (s/split (re-pattern ":"))
                         pprint)}


         test-clj-once  {:doc "invoke clojure tests"
                         :task (shell "clojure -M:test-clj")}

         test-clj       {:doc "invoke clojure tests and watch"
                         :task (shell "clojure -M:test-clj --watch --fail-fast --no-randomize")}


         test-cljs-once {:doc "invoke clojurescript tests once"
                         :task (shell "clojure -M:test-cljs -d src/test/clj")}


         test-cljs      {:doc "invoke clojurescript tests and watch"
                         :task (shell "clojure -M:test-cljs -d src/test/clj -w src/main/clj")}

         print-commandline (prn (concat ["-" "arg"] *command-line-args*))


         git-data         {:extra-deps {io.github.davesann/bb-git-local {:git/tag "v2" :git/sha "fd4debc"}}
                           :requires [[dsann.bb.git :as g]]
                           :task (g/git-data)}

         create-git-data {:depends [git-data]
                          :requires [[clojure.pprint :refer [pprint]]]
                          :task (binding [*print-namespace-maps* false]
                                  (spit "gen/git-data.edn"
                                       (with-out-str (pprint git-data))))}

         create-readme {:doc "Generate README File"
                        :depends [git-data]
                        :extra-deps {comb/comb {:mvn/version "0.1.1"}}
                        :requires [[comb.template :as comb]]
                        :task (binding [*print-namespace-maps* false]
                                (let [readme (slurp "src/docs/README.comb.md")]
                                  (spit "README.md" (comb/eval readme git-data))))}}}



  ; package-jar {:doc "Prepare jar for packages"
  ;              :task (do
  ;                      (println "Producing uberjar")
  ;                      (shell "bb --config .build/uberjar.edn --deps-root .
  ;                             uberjar http-server.jar -m babashka.http-server"))}

  ; upload-jar {:doc "Upload jar to release"
  ;             :depends [package-jar]
  ;             :requires ([borkdude.gh-release-artifact :as ghr])
  ;             :task (do
  ;                     (println "Uploading jar" (str "v" (utils/format-version)))
  ;                     (ghr/overwrite-asset {:org "babashka"
  ;                                           :repo "http-server"
  ;                                           :file "http-server.jar"
  ;                                           :draft false
  ;                                           :tag (str "v" (utils/format-version))}))}}}

  ; tag {:doc "Create and push tag"
  ;      :task (do (shell "git tag" (str "v" (utils/format-version)))
  ;                (shell "git push --atomic" "origin" "main" (str "v" (utils/format-version))))}

  ; bump-release {:doc "Bump release counter"
  ;               :task (let [old-version (utils/format-version)]
  ;                       (utils/bump-version)
  ;                       (spit "README.md" (str/replace (slurp "README.md")
  ;                                                      old-version
  ;                                                      (utils/format-version)))
  ;                       (shell "git add version.edn README.md")
  ;                       (shell "git commit -m" (str "v" (utils/format-version))))}

  ; publish {:doc "Bump release count and publish to clojars"
  ;          :task (do
  ;                  (when-not (:skip-bump cmd-line-opts)
  ;                    (run 'bump-release))
  ;                  (println "Uploading jar")
  ;                  (run 'tag)
  ;                  (run 'upload-jar)
  ;                  (clojure "-T:build deploy"))}}}
